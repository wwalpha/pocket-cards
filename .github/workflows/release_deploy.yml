name: RELEASE_D) Production Deploy

on:
  release:
    types:
      - released

env:
  AWS_DEFAULT_REGION: us-east-1
  WORKING_DIR_TERRAFORM: infrastructure/terraform
  WORKING_DIR_BACKEND: backend
  TF_WORKSPACE: prod
  ECS_CLUSTER_NAME: pkc-cluster
  ECS_SERVICE_NAME_BACKEND: backend
  ECS_SERVICE_NAME_AUTH: auth_manager
  ECS_SERVICE_NAME_USER: user_manager
  ECS_TAKS_DEFINITION_FILE: task_definition.json
  ECS_TAKS_DEFINITION_AUTH: pkc-auth
  ECS_TAKS_DEFINITION_USERS: pkc-users
  ECS_TAKS_DEFINITION_BACKEND: pkc-backend
  SSM_PARAMETER_NAME_ECR: /pkc/repository_url
  SSM_PARAMETER_NAME_FRONTEND: /pkc/frontend

jobs:
  # Terraform
  Terraform_Setup:
    uses: ./.github/workflows/reuse_terraform.yml
    with:
      region: us-east-1
      working-directory: infrastructure/terraform/setup
      environment: prod
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      TF_VARS: ${{ secrets.TERRAFORM_VARS }}

  Terraform_Service:
    needs: Terraform_Setup
    uses: ./.github/workflows/reuse_terraform.yml
    with:
      region: us-east-1
      working-directory: infrastructure/terraform/services
      environment: prod
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      TF_VARS: ${{ secrets.TERRAFORM_VARS }}

  Terraform_Backend:
    needs: Terraform_Service
    uses: ./.github/workflows/reuse_terraform.yml
    with:
      region: us-east-1
      working-directory: backend/terraform
      environment: prod
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      TF_VARS: ${{ secrets.TERRAFORM_VARS }}

  Backend:
    runs-on: ubuntu-latest
    needs: Terraform_Backend
    environment:
      name: prod

    steps:
      # AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      # Get ECS informations
      - name: Get ECS informations
        id: ecs
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TAKS_DEFINITION_BACKEND | jq .taskDefinition > $ECS_TAKS_DEFINITION_FILE
          image=$(aws ssm get-parameter --name $SSM_PARAMETER_NAME_ECR/backend --with-decryption | jq -r .Parameter.Value)
          echo "::set-output name=definition::$GITHUB_WORKSPACE/$WORKING_DIR/$ECS_TAKS_DEFINITION_FILE"
          echo "::set-output name=image::$image"

      # update task definition
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.ecs.outputs.definition }}
          container-name: ${{ env.ECS_TAKS_DEFINITION_BACKEND }}
          image: ${{ steps.ecs.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME_BACKEND }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
          force-new-deployment: true

  # Auth Manager
  Auth:
    runs-on: ubuntu-latest
    needs: Terraform_Backend
    environment:
      name: prod

    steps:
      # AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      # Get ECS informations
      - name: Get ECS informations
        id: ecs
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TAKS_DEFINITION_AUTH | jq .taskDefinition > $ECS_TAKS_DEFINITION_FILE
          image=$(aws ssm get-parameter --name $SSM_PARAMETER_NAME_ECR/$ECS_SERVICE_NAME_AUTH --with-decryption | jq -r .Parameter.Value)
          echo "::set-output name=definition::$GITHUB_WORKSPACE/$WORKING_DIR/$ECS_TAKS_DEFINITION_FILE"
          echo "::set-output name=image::$image"

      # update task definition
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.ecs.outputs.definition }}
          container-name: ${{ env.ECS_TAKS_DEFINITION_AUTH }}
          image: ${{ steps.ecs.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME_AUTH }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
          force-new-deployment: true

  # Users Manager
  Users:
    runs-on: ubuntu-latest
    needs: Terraform_Backend
    environment:
      name: prod

    steps:
      # AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      # Get ECS informations
      - name: Get ECS informations
        id: ecs
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TAKS_DEFINITION_USERS | jq .taskDefinition > $ECS_TAKS_DEFINITION_FILE
          image=$(aws ssm get-parameter --name $SSM_PARAMETER_NAME_ECR/$ECS_SERVICE_NAME_USER --with-decryption | jq -r .Parameter.Value)
          echo "::set-output name=definition::$GITHUB_WORKSPACE/$WORKING_DIR/$ECS_TAKS_DEFINITION_FILE"
          echo "::set-output name=image::$image"

      # update task definition
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.ecs.outputs.definition }}
          container-name: ${{ env.ECS_TAKS_DEFINITION_USERS }}
          image: ${{ steps.ecs.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME_USER }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
          force-new-deployment: true


  # Frontend Admin
  FrontAdmin:
    needs: Terraform_Backend
    uses: ./.github/workflows/reuse_react.yml
    with:
      environment: prod
      region: ${{ env.AWS_DEFAULT_REGION }}
      working-directory: frontend/react
      module: admin
      deploy: false
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}

  # Frontend Users
  FrontUsers:
    needs: Terraform_Backend
    uses: ./.github/workflows/reuse_react.yml
    with:
      environment: prod
      region: ${{ env.AWS_DEFAULT_REGION }}
      working-directory: frontend/react
      module: users
      deploy: false
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
