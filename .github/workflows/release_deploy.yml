name: RELEASE_D) Production Deploy

on:
  release:
    types:
      - released

env:
  AWS_DEFAULT_REGION: us-east-1
  WORKING_DIR_TERRAFORM: infrastructure/terraform
  WORKING_DIR_BACKEND: backend
  WORKING_DIR_FRONTEND_ADMIN: frontend/react/admin
  TF_WORKSPACE: prod
  ECS_CLUSTER_NAME: pkc-cluster
  ECS_SERVICE_NAME_BACKEND: backend
  ECS_SERVICE_NAME_AUTH: auth_manager
  ECS_SERVICE_NAME_USER: user_manager
  ECS_TAKS_DEFINITION_FILE: task_definition.json
  ECS_TAKS_DEFINITION_AUTH: pkc-auth
  ECS_TAKS_DEFINITION_USERS: pkc-users
  ECS_TAKS_DEFINITION_BACKEND: pkc-backend
  SSM_PARAMETER_NAME_ECR: /pkc/repository_url
  SSM_PARAMETER_NAME_FRONTEND: /pkc/frontend

jobs:
  # Terraform
  Terraform_Setup:
    uses: ./.github/workflows/reuse_terraform.yml
    with:
      region: us-east-1
      working-directory: infrastructure/terraform/setup
      environment: prod
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      TF_VARS: ${{ secrets.TERRAFORM_VARS }}

  Terraform_Service:
    needs: Terraform_Setup
    uses: ./.github/workflows/reuse_terraform.yml
    with:
      region: us-east-1
      working-directory: infrastructure/terraform/services
      environment: prod
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      TF_VARS: ${{ secrets.TERRAFORM_VARS }}

  Terraform_Backend:
    needs: Terraform_Service
    uses: ./.github/workflows/reuse_terraform.yml
    with:
      region: us-east-1
      working-directory: backend/terraform
      environment: prod
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      TF_VARS: ${{ secrets.TERRAFORM_VARS }}

  Backend:
    runs-on: ubuntu-latest
    needs: Terraform_Backend
    environment:
      name: prod

    steps:
      # AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      # Get ECS informations
      - name: Get ECS informations
        id: ecs
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TAKS_DEFINITION_BACKEND | jq .taskDefinition > $ECS_TAKS_DEFINITION_FILE
          image=$(aws ssm get-parameter --name $SSM_PARAMETER_NAME_ECR/backend --with-decryption | jq -r .Parameter.Value)
          echo "::set-output name=definition::$GITHUB_WORKSPACE/$WORKING_DIR/$ECS_TAKS_DEFINITION_FILE"
          echo "::set-output name=image::$image"

      # update task definition
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.ecs.outputs.definition }}
          container-name: ${{ env.ECS_TAKS_DEFINITION_BACKEND }}
          image: ${{ steps.ecs.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME_BACKEND }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
          force-new-deployment: true

  # Auth Manager
  Auth:
    runs-on: ubuntu-latest
    needs: Terraform_Backend
    environment:
      name: prod

    steps:
      # AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      # Get ECS informations
      - name: Get ECS informations
        id: ecs
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TAKS_DEFINITION_AUTH | jq .taskDefinition > $ECS_TAKS_DEFINITION_FILE
          image=$(aws ssm get-parameter --name $SSM_PARAMETER_NAME_ECR/$ECS_SERVICE_NAME_AUTH --with-decryption | jq -r .Parameter.Value)
          echo "::set-output name=definition::$GITHUB_WORKSPACE/$WORKING_DIR/$ECS_TAKS_DEFINITION_FILE"
          echo "::set-output name=image::$image"

      # update task definition
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.ecs.outputs.definition }}
          container-name: ${{ env.ECS_TAKS_DEFINITION_AUTH }}
          image: ${{ steps.ecs.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME_AUTH }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
          force-new-deployment: true

  # Users Manager
  Users:
    runs-on: ubuntu-latest
    needs: Terraform_Backend
    environment:
      name: prod

    steps:
      # AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      # Get ECS informations
      - name: Get ECS informations
        id: ecs
        run: |
          aws ecs describe-task-definition --task-definition $ECS_TAKS_DEFINITION_USERS | jq .taskDefinition > $ECS_TAKS_DEFINITION_FILE
          image=$(aws ssm get-parameter --name $SSM_PARAMETER_NAME_ECR/$ECS_SERVICE_NAME_USER --with-decryption | jq -r .Parameter.Value)
          echo "::set-output name=definition::$GITHUB_WORKSPACE/$WORKING_DIR/$ECS_TAKS_DEFINITION_FILE"
          echo "::set-output name=image::$image"

      # update task definition
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: render-web-container
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ steps.ecs.outputs.definition }}
          container-name: ${{ env.ECS_TAKS_DEFINITION_USERS }}
          image: ${{ steps.ecs.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.render-web-container.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME_USER }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true
          force-new-deployment: true

  # [Frontend]
  Frontend:
    runs-on: ubuntu-18.04
    needs: Terraform_Backend
    environment:
      name: prod
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR_FRONTEND_ADMIN }}

    steps:
      # Source checkout
      - name: Checkout
        uses: actions/checkout@v2

      # AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      # Install the latest version of Terraform CLI 
      # and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      # Get terraform outputs
      - name: Get terraform outputs
        id: terraform
        run: |
          cd configs/terraform
          terraform init
          terraform apply -auto-approve=true
          BUCKET_NAME_FRONTEND=$(terraform output -raw bucket_name_frontend)
          echo ::set-output name=bucket_name_archive::$(terraform output -raw bucket_name_archive)
          echo ::set-output name=bucket_name_frontend::$(terraform output -raw bucket_name_frontend)
          echo ::set-output name=source_tag::${GITHUB_REF#refs/tags/}

      # Pre Install
      - name: PreInstall
        run: |
          cd ..
          yarn install

      # Install and Build
      - name: Build
        env:
          BUCKET_NAME_ARCHIVE: ${{ steps.terraform.outputs.bucket_name_archive }}
          VERSION: ${{ steps.terraform.outputs.source_tag }}
          NODE_ENV: production
        run: |
          aws s3 cp s3://$BUCKET_NAME_ARCHIVE/envs/frontend.env .
          echo VERSION=$(echo $VERSION | cut -c 1-6) >> frontend.env
          yarn install --production=false
          yarn build

      # Deploy frontend
      - name: Deploy
        env:
          BUCKET_NAME_FRONTEND: ${{ steps.terraform.outputs.bucket_name_frontend }}
        run: |
          aws s3 cp dist s3://$BUCKET_NAME_FRONTEND/ --recursive --region $AWS_DEFAULT_REGION
