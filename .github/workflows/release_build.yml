name: RELEASE_B) Production Build

on:
  release:
    types:
      - prereleased
      - edited

env:
  AWS_DEFAULT_REGION: us-east-1
  WORKING_DIR_FRONTEND: frontend/react
  TF_WORKSPACE: prod

jobs:
  #Terraform
  Terraform_Setup:
    uses: ./.github/workflows/reuse_terraform.yml
    with:
      region: us-east-1
      working-directory: infrastructure/terraform/setup
      environment: prod
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      TF_VARS: ${{ secrets.TERRAFORM_VARS }}

  Terraform_Service:
    needs: Terraform_Setup
    uses: ./.github/workflows/reuse_terraform.yml
    with:
      region: us-east-1
      working-directory: infrastructure/terraform/services
      environment: prod
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
      TF_API_TOKEN: ${{ secrets.TF_API_TOKEN }}
      TF_VARS: ${{ secrets.TERRAFORM_VARS }}

  # Backend
  Backend:
    uses: ./.github/workflows/reuse_ecs_build.yml
    with:
      region: us-east-1
      working-directory: backend/nodejs/core
      environment: prod
      run-tests: false
      ECS_SERVICE_NAME: backend
      ECR_REPOSITORY: pkc/backend
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # Batch
  Batch:
    uses: ./.github/workflows/reuse_ecs_build.yml
    with:
      region: us-east-1
      working-directory: backend/nodejs/batch
      environment: prod
      run-tests: false
      ECS_SERVICE_NAME: batch
      ECR_REPOSITORY: pkc/batch
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # Auth Manager
  Auth_Manager:
    uses: ./.github/workflows/reuse_ecs_build.yml
    with:
      region: us-east-1
      working-directory: backend/nodejs/auth_manager
      environment: prod
      ECS_SERVICE_NAME: auth_manager
      ECR_REPOSITORY: pkc/auth
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # Users Manager
  Users_Manager:
    uses: ./.github/workflows/reuse_ecs_build.yml
    with:
      region: us-east-1
      working-directory: backend/nodejs/user_manager
      environment: prod
      ECS_SERVICE_NAME: user_manager
      ECR_REPOSITORY: pkc/users
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # Lambda
  Lambda_Cognito:
    uses: ./.github/workflows/reuse_lambda.yml
    with:
      region: us-east-1
      working-directory: backend/nodejs/lambda/cognito
      environment: prod
      outputs-bucket: pkc-archive-af2a18
      function-name: cognito
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  Lambda_Authorizer:
    uses: ./.github/workflows/reuse_lambda.yml
    with:
      region: us-east-1
      working-directory: backend/nodejs/lambda/authorizer
      environment: prod
      outputs-bucket: pkc-archive-af2a18
      function-name: authorizer
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  Lambda_Status:
    uses: ./.github/workflows/reuse_lambda.yml
    with:
      region: us-east-1
      working-directory: backend/nodejs/lambda/status
      environment: prod
      outputs-bucket: pkc-archive-af2a18
      function-name: status
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  Lambda_Start:
    uses: ./.github/workflows/reuse_lambda.yml
    with:
      region: us-east-1
      working-directory: backend/nodejs/lambda/start
      environment: prod
      outputs-bucket: pkc-archive-af2a18
      function-name: start
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  Lambda_Stop:
    uses: ./.github/workflows/reuse_lambda.yml
    with:
      region: us-east-1
      working-directory: backend/nodejs/lambda/stop
      environment: prod
      outputs-bucket: pkc-archive-af2a18
      function-name: stop
    secrets:
      AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
      AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}

  # Frontend
  Frontend:
    runs-on: ubuntu-latest
    concurrency: frontend
    environment:
      name: prod
    env:
      NODE_ENV: production
    defaults:
      run:
        working-directory: ${{ env.WORKING_DIR_FRONTEND }}

    steps:
      # source checkout
      - name: Checkout
        uses: actions/checkout@v2

      # Setup Node.js
      - uses: actions/setup-node@v2
        with:
          node-version: 14.x

      # Install the latest version of Terraform CLI 
      # and configure the Terraform CLI configuration file with a Terraform Cloud user API token
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v1
        with:
          terraform_version: 1.0.4
          cli_config_credentials_token: ${{ secrets.TF_API_TOKEN }}
          terraform_wrapper: false

      # AWS Credentials
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_DEFAULT_REGION }}

      # Get terraform outputs
      - name: Get terraform outputs
        id: terraform
        run: |
          cd configs/terraform
          terraform init
          terraform apply -auto-approve=true
          BUCKET_NAME_ARCHIVE=$(terraform output -raw bucket_name_archive)
          BUCKET_NAME_FRONTEND=$(terraform output -raw bucket_name_frontend)
          echo "::set-output name=bucket_name_archive::$(terraform output -raw bucket_name_archive)"
          echo "::set-output name=bucket_name_frontend::$(terraform output -raw bucket_name_frontend)"

      # Install and Build
      - name: Build
        env:
          BUCKET_NAME_ARCHIVE: ${{ steps.terraform.outputs.bucket_name_archive }}
        run: |
          aws s3 cp s3://$BUCKET_NAME_ARCHIVE/envs/frontend.env .
          yarn install --production=false
          yarn build
